import numpy as np
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam, RMSprop, SGD
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report
import matplotlib.pyplot as plt

# Set random seed for reproducibility
np.random.seed(42)
tf.random.set_seed(42)

# Generate synthetic data (same as Lab 2)
num_samples = 1000
ages = np.random.randint(18, 70, size=num_samples)
bmis = np.random.uniform(18.5, 40, size=num_samples)
blood_sugar_levels = np.random.uniform(70, 140, size=num_samples)

# Create feature matrix X
X = np.vstack((ages, bmis, blood_sugar_levels)).T

# Create target variable y (1 if BMI > 25 AND blood sugar > 100, else 0)
y = np.logical_and(bmis > 25, blood_sugar_levels > 100).astype(int)

# Define min-max scaling function
def minmaxscale(X):
    return (X - X.min(axis=0)) / (X.max(axis=0) - X.min(axis=0))

# Scale features
X_scaled = minmaxscale(X)

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

print("Dataset Information:")
print(f"X_train shape: {X_train.shape}")
print(f"y_train shape: {y_train.shape}")
print(f"X_test shape: {X_test.shape}")
print(f"y_test shape: {y_test.shape}")
print(f"Percentage of positive class in training: {np.mean(y_train) * 100:.2f}%")
print(f"Percentage of positive class in test: {np.mean(y_test) * 100:.2f}%")

# Original model from Lab 2
def create_original_model():
    model = Sequential([
        Dense(10, activation='relu', input_shape=(X_train.shape[1],)),
        Dense(8, activation='relu'),
        Dense(8, activation='relu'),
        Dense(4, activation='relu'),
        Dense(1, activation='sigmoid')
    ])
    
    # Compile the model
    model.compile(optimizer='adam',
                 loss='binary_crossentropy',
                 metrics=['accuracy'])
    
    return model

# Function to create model with specific hyperparameters
def create_model(units1, units2, units3, dropout_rate, learning_rate, optimizer_name='adam'):
    model = Sequential()
    
    # First hidden layer
    model.add(Dense(units1, activation='relu', input_shape=(X_train.shape[1],)))
    if dropout_rate > 0:
        model.add(Dropout(dropout_rate))
    
    # Second hidden layer
    model.add(Dense(units2, activation='relu'))
    if dropout_rate > 0:
        model.add(Dropout(dropout_rate))
    
    # Third hidden layer
    model.add(Dense(units3, activation='relu'))
    if dropout_rate > 0:
        model.add(Dropout(dropout_rate))
    
    # Output layer
    model.add(Dense(1, activation='sigmoid'))
    
    # Choose optimizer
    if optimizer_name == 'adam':
        optimizer = Adam(learning_rate=learning_rate)
    elif optimizer_name == 'rmsprop':
        optimizer = RMSprop(learning_rate=learning_rate)
    else:
        optimizer = SGD(learning_rate=learning_rate)
    
    # Compile the model
    model.compile(optimizer=optimizer,
                 loss='binary_crossentropy',
                 metrics=['accuracy'])
    
    return model

# Define hyperparameter search space
def manual_hyperparameter_tuning():
    print("\nPerforming manual hyperparameter tuning...")
    
    # Hyperparameter grid
    units1_options = [12, 16, 24, 32]
    units2_options = [8, 12, 16]
    units3_options = [4, 8]
    dropout_options = [0.0, 0.2, 0.4]
    learning_rate_options = [0.01, 0.001, 0.0005]
    optimizer_options = ['adam', 'rmsprop', 'sgd']
    
    best_val_acc = 0
    best_params = {}
    all_results = []
    
    # Create validation set
    X_train_sub, X_val, y_train_sub, y_val = train_test_split(
        X_train, y_train, test_size=0.2, random_state=42)
    
    # Early stopping callback
    early_stopping = EarlyStopping(
        monitor='val_loss',
        patience=10,
        restore_best_weights=True
    )
    
    # Try a subset of hyperparameter combinations (full grid would be too large)
    for units1 in units1_options:
        for units2 in units2_options:
            for units3 in units3_options:
                for dropout_rate in [0.0, 0.2]:  # Simplified for faster execution
                    for learning_rate in [0.001]:  # Just use the typical good value
                        for optimizer_name in ['adam']:  # Just use the default optimizer
                            
                            print(f"Testing: units1={units1}, units2={units2}, units3={units3}, dropout={dropout_rate}")
                            
                            # Create and train model
                            model = create_model(
                                units1=units1,
                                units2=units2, 
                                units3=units3,
                                dropout_rate=dropout_rate,
                                learning_rate=learning_rate,
                                optimizer_name=optimizer_name
                            )
                            
                            # Use shorter training with early stopping for faster exploration
                            history = model.fit(
                                X_train_sub, y_train_sub,
                                epochs=50,  # Reduced epochs for faster tuning
                                batch_size=32,
                                validation_data=(X_val, y_val),
                                callbacks=[early_stopping],
                                verbose=0  # Set to 1 to see training progress
                            )
                            
                            # Get validation accuracy
                            val_loss, val_acc = model.evaluate(X_val, y_val, verbose=0)
                            
                            # Record results
                            params = {
                                'units1': units1,
                                'units2': units2,
                                'units3': units3,
                                'dropout_rate': dropout_rate,
                                'learning_rate': learning_rate,
                                'optimizer': optimizer_name,
                                'val_accuracy': val_acc
                            }
                            all_results.append(params)
                            
                            print(f"Validation accuracy: {val_acc:.4f}")
                            
                            # Update best model if improved
                            if val_acc > best_val_acc:
                                best_val_acc = val_acc
                                best_params = params
    
    # Print all results sorted by validation accuracy
    all_results.sort(key=lambda x: x['val_accuracy'], reverse=True)
    
    print("\nTop 5 hyperparameter configurations:")
    for i, params in enumerate(all_results[:5]):
        print(f"{i+1}. {params}")
    
    print("\nBest hyperparameters:")
    print(best_params)
    
    return best_params

# Run hyperparameter tuning
best_params = manual_hyperparameter_tuning()

# Create model with best hyperparameters
print("\nCreating model with best hyperparameters...")
best_model = create_model(
    units1=best_params['units1'],
    units2=best_params['units2'],
    units3=best_params['units3'],
    dropout_rate=best_params['dropout_rate'],
    learning_rate=best_params['learning_rate'],
    optimizer_name=best_params['optimizer']
)

# Early stopping and learning rate reduction
early_stopping = EarlyStopping(
    monitor='val_loss',
    patience=15,
    restore_best_weights=True
)

reduce_lr = ReduceLROnPlateau(
    monitor='val_loss',
    factor=0.2,
    patience=5,
    min_lr=0.0001
)

# Train best model with more epochs
print("\nTraining the best model with early stopping...")
history = best_model.fit(
    X_train, y_train,
    epochs=150,
    batch_size=32,
    validation_split=0.2,
    callbacks=[early_stopping, reduce_lr],
    verbose=1
)

# Evaluate on test set
print("\nEvaluating on test set...")
loss, accuracy = best_model.evaluate(X_test, y_test)
print(f"Test Loss: {loss:.4f}, Test Accuracy: {accuracy:.4f}")

# Make predictions and calculate metrics
y_pred_prob = best_model.predict(X_test)
y_pred = (y_pred_prob > 0.5).astype(int)

# Calculate confusion matrix
tn, fp, fn, tp = confusion_matrix(y_test, y_pred).ravel()
print("\nConfusion Matrix:")
print(f"True Positives: {tp}")
print(f"False Positives: {fp}")
print(f"True Negatives: {tn}")
print(f"False Negatives: {fn}")

# Calculate performance metrics
precision = tp / (tp + fp) if (tp + fp) > 0 else 0
recall = tp / (tp + fn) if (tp + fn) > 0 else 0
f1_score = 2 * (precision * recall) / (precision + recall) if (precision + recall) > 0 else 0
print(f"\nPrecision: {precision:.4f}")
print(f"Recall: {recall:.4f}")
print(f"F1 Score: {f1_score:.4f}")

# Print classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Plot training history
plt.figure(figsize=(12, 5))

# Plot accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Plot loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.savefig('optimized_model_history.png')
plt.show()

# Compare with original model
print("\nComparing with original model from Lab 2:")

# Create and train original model
original_model = create_original_model()

# Train the original model
print("\nTraining the original model...")
original_history = original_model.fit(
    X_train, y_train,
    epochs=100,
    batch_size=32,
    validation_split=0.2,
    verbose=1
)

# Evaluate original model on test set
original_loss, original_accuracy = original_model.evaluate(X_test, y_test)
print(f"Original Model - Test Loss: {original_loss:.4f}, Test Accuracy: {original_accuracy:.4f}")
print(f"Optimized Model - Test Loss: {loss:.4f}, Test Accuracy: {accuracy:.4f}")
print(f"Improvement: {(accuracy - original_accuracy) * 100:.2f}%")

# Conclusion and analysis
print("\nHyperparameter Tuning Analysis:")
print("1. The original model achieved a test accuracy of {:.4f}".format(original_accuracy))
print("2. The optimized model achieved a test accuracy of {:.4f}".format(accuracy))
print("3. Key improvements from hyperparameter tuning:")
print("   - Optimized layer sizes for each hidden layer:")
print(f"     * First layer: {best_params['units1']} neurons (vs 10 in original)")
print(f"     * Second layer: {best_params['units2']} neurons (vs 8 in original)")
print(f"     * Third layer: {best_params['units3']} neurons (vs 8 in original)")
print(f"   - Added dropout regularization: {best_params['dropout_rate']}")
print(f"   - Fine-tuned learning rate: {best_params['learning_rate']}")
print(f"   - Selected optimizer: {best_params['optimizer']}")
print("   - Implemented early stopping and learning rate reduction")
print("4. The performance improvement is {:.2f}% over the baseline model".format((accuracy - original_accuracy) * 100))

# Save the best model configuration for future reference
best_model_config = {
    'architecture': [best_params['units1'], best_params['units2'], best_params['units3']],
    'dropout_rate': best_params['dropout_rate'],
    'learning_rate': best_params['learning_rate'],
    'optimizer': best_params['optimizer'],
    'test_accuracy': accuracy
}

print("\nBest model configuration saved for reference:")
print(best_model_config)
